[{"title":"Getting Started with enumerator","type":0,"sectionRef":"#","url":"docs/intro","content":"Getting Started with enumerator Here are some quick links to get started using enumerator: Installation guideAPI Docs","keywords":""},{"title":"Installation","type":0,"sectionRef":"#","url":"docs/Installation","content":"","keywords":""},{"title":"Method #1 - RepoToRoblox","type":1,"pageTitle":"Installation","url":"docs/Installation#method-1---repotoroblox","content":"Using Boatbomber's RepoToRoblox plugin is the easiest way to install in Studio. In the RepoToRoblox widget, enter howmanysmall as the Owner and enumerator as the Repo.Click the Clone Repo button.  "},{"title":"Method #2 - HttpService","type":1,"pageTitle":"Installation","url":"docs/Installation#method-2---httpservice","content":"This method uses HttpService to install enumerator. In Roblox Studio, paste the following command into your command bar.Run the following command:  local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local HttpService = game:GetService(&quot;HttpService&quot;) local HttpEnabled = HttpService.HttpEnabled HttpService.HttpEnabled = true local function RequestAsync(RequestDictionary) return HttpService:RequestAsync(RequestDictionary) end local function GetAsync(Url, Headers) Headers[&quot;cache-control&quot;] = &quot;no-cache&quot; local Success, ResponseDictionary = pcall(RequestAsync, { Headers = Headers; Method = &quot;GET&quot;; Url = Url; }) if Success then if ResponseDictionary.Success then return ResponseDictionary.Body else return false, string.format(&quot;HTTP %d: %s&quot;, ResponseDictionary.StatusCode, ResponseDictionary.StatusMessage) end else return false, ResponseDictionary end end local function Initify(Root) local InitFile = Root:FindFirstChild(&quot;init&quot;) or Root:FindFirstChild(&quot;init.lua&quot;) or Root:FindFirstChild(&quot;init.client.lua&quot;) or Root:FindFirstChild(&quot;init.server.lua&quot;) if InitFile then InitFile.Name = Root.Name InitFile.Parent = Root.Parent for _, Child in ipairs(Root:GetChildren()) do Child.Parent = InitFile end Root:Destroy() Root = InitFile end for _, Child in ipairs(Root:GetChildren()) do Initify(Child) end return Root end local FilesList = HttpService:JSONDecode(assert(GetAsync( &quot;https://api.github.com/repos/howmanysmall/enumerator/contents/src&quot;, {accept = &quot;application/vnd.github.v3+json&quot;} ))) local Enumerator = Instance.new(&quot;Folder&quot;) Enumerator.Name = &quot;Enumerator&quot; for _, FileData in ipairs(FilesList) do local ModuleName = string.match(FileData.name, &quot;(%w+)%.lua&quot;) if not ModuleName then continue end local ModuleScript = Instance.new(&quot;ModuleScript&quot;) ModuleScript.Name = ModuleName local Success, Source = GetAsync(FileData.download_url, {}) if not Success then ModuleScript.Source = string.format(&quot;-- %s&quot;, tostring(Source)) else ModuleScript.Source = tostring(Success) end ModuleScript.Parent = Enumerator end Enumerator.Parent = ReplicatedStorage Initify(Enumerator) HttpService.HttpEnabled = HttpEnabled  "},{"title":"Method 3 - Manual","type":1,"pageTitle":"Installation","url":"docs/Installation#method-3---manual","content":"Visit the latest releaseUnder Assets, click enumerator.rbxm Using Rojo? Put the file into your game directly.Using Roblox Studio? Drag the file onto the viewport. It should insert under Workspace. "},{"title":"Method 4 - Wally","type":1,"pageTitle":"Installation","url":"docs/Installation#method-4---wally","content":"Setup Wally by using wally init.Add howmanysmall/enumerator as a dependency. [dependencies]enumerator = &quot;howmanysmall/enumerator@^2.2.2&quot; Copy "},{"title":"EnumeratorObject","type":0,"sectionRef":"#","url":"api/EnumeratorObject","content":"","keywords":""},{"title":"Types","type":1,"pageTitle":"EnumeratorObject","url":"api/EnumeratorObject#types","content":" "},{"title":"EnumeratorItem","type":1,"pageTitle":"EnumeratorObject","url":"api/EnumeratorObject#EnumeratorItem","content":"Enum &lt;/&gt; interface EnumeratorItem { name: string-- The name of the EnumeratorItem. type: EnumeratorObject&lt;Value&gt;-- Returns the EnumeratorObject that this EnumeratorItem belongs to. value: Value-- The value of the EnumeratorItem. rawName: () → string-- A function version of .name. rawType: () → EnumeratorObject&lt;Value&gt;-- A function version of .type. rawValue: () → Value-- A function version of .value. } An EnumeratorItem is meant to represent a unique value. "},{"title":"Enumerator","type":0,"sectionRef":"#","url":"api/Enumerator","content":"","keywords":""},{"title":"Types","type":1,"pageTitle":"Enumerator","url":"api/Enumerator#types","content":" "},{"title":"EnumeratorObject","type":1,"pageTitle":"Enumerator","url":"api/Enumerator#EnumeratorObject","content":"Enum &lt;/&gt; interface EnumeratorObject { cast: (value: any) → ( EnumeratorItem&lt;Value&gt; | boolean, string? )-- Attempts to cast a value to an EnumeratorItem. fromRawValue: (rawValue: Value) → EnumeratorItem&lt;Value&gt;?-- Attempts to create an EnumeratorItem from a raw value. getEnumeratorItems: () → {EnumeratorItem&lt;Value&gt;}-- Returns a table of all EnumeratorItems in the EnumeratorObject. getSortedEnumeratorItems: () → {EnumeratorItem&lt;Value&gt;}-- Returns a table of all EnumeratorItems in the EnumeratorObject, sorted by value. isEnumValue: (value: any) → boolean-- Returns whether or not a value is an EnumeratorItem. } An EnumeratorObject is meant to represent a collection of unique values. "},{"title":"Functions","type":1,"pageTitle":"Enumerator","url":"api/Enumerator#functions","content":" "},{"title":"Enumerator","type":1,"pageTitle":"Enumerator","url":"api/Enumerator#Enumerator","content":"&lt;/&gt; Enumerator.Enumerator( enumName: string,-- The name of the enumeration. enumValues: {string} | {[string]: any}-- The values of the enumeration. ) → EnumeratorObject-- The new EnumeratorObject. Creates a new EnumeratorObject. local Fruit = enumerator(&quot;Fruit&quot;, {&quot;Apple&quot;, &quot;Banana&quot;, &quot;Orange&quot;, &quot;Grape&quot;}) local Numbers = enumerator(&quot;Numbers&quot;, { One = 1; Two = 2; Three = 3; })  "}]